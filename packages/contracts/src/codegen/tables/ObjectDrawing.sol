// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("ObjectDrawing")))
);
ResourceId constant ObjectDrawingTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0000000200000000000000000000000000000000000000000000000000000000
);

struct ObjectDrawingData {
  uint32[] x;
  uint32[] y;
}

library ObjectDrawing {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](2);
    _keySchema[0] = SchemaType.BYTES32;
    _keySchema[1] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](2);
    _valueSchema[0] = SchemaType.UINT32_ARRAY;
    _valueSchema[1] = SchemaType.UINT32_ARRAY;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "gameName";
    keyNames[1] = "player";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](2);
    fieldNames[0] = "x";
    fieldNames[1] = "y";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get x.
   */
  function getX(bytes32 gameName, bytes32 player) internal view returns (uint32[] memory x) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get x.
   */
  function _getX(bytes32 gameName, bytes32 player) internal view returns (uint32[] memory x) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get x (using the specified store).
   */
  function getX(IStore _store, bytes32 gameName, bytes32 player) internal view returns (uint32[] memory x) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Set x.
   */
  function setX(bytes32 gameName, bytes32 player, uint32[] memory x) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((x)));
  }

  /**
   * @notice Set x.
   */
  function _setX(bytes32 gameName, bytes32 player, uint32[] memory x) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((x)));
  }

  /**
   * @notice Set x (using the specified store).
   */
  function setX(IStore _store, bytes32 gameName, bytes32 player, uint32[] memory x) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    _store.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((x)));
  }

  /**
   * @notice Get the length of x.
   */
  function lengthX(bytes32 gameName, bytes32 player) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of x.
   */
  function _lengthX(bytes32 gameName, bytes32 player) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of x (using the specified store).
   */
  function lengthX(IStore _store, bytes32 gameName, bytes32 player) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    uint256 _byteLength = _store.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get an item of x.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemX(bytes32 gameName, bytes32 player, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of x.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemX(bytes32 gameName, bytes32 player, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of x (using the specified store).
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemX(IStore _store, bytes32 gameName, bytes32 player, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _blob = _store.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Push an element to x.
   */
  function pushX(bytes32 gameName, bytes32 player, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to x.
   */
  function _pushX(bytes32 gameName, bytes32 player, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to x (using the specified store).
   */
  function pushX(IStore _store, bytes32 gameName, bytes32 player, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    _store.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from x.
   */
  function popX(bytes32 gameName, bytes32 player) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Pop an element from x.
   */
  function _popX(bytes32 gameName, bytes32 player) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Pop an element from x (using the specified store).
   */
  function popX(IStore _store, bytes32 gameName, bytes32 player) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    _store.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Update an element of x at `_index`.
   */
  function updateX(bytes32 gameName, bytes32 player, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of x at `_index`.
   */
  function _updateX(bytes32 gameName, bytes32 player, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of x (using the specified store) at `_index`.
   */
  function updateX(IStore _store, bytes32 gameName, bytes32 player, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      _store.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get y.
   */
  function getY(bytes32 gameName, bytes32 player) internal view returns (uint32[] memory y) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get y.
   */
  function _getY(bytes32 gameName, bytes32 player) internal view returns (uint32[] memory y) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get y (using the specified store).
   */
  function getY(IStore _store, bytes32 gameName, bytes32 player) internal view returns (uint32[] memory y) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    bytes memory _blob = _store.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Set y.
   */
  function setY(bytes32 gameName, bytes32 player, uint32[] memory y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((y)));
  }

  /**
   * @notice Set y.
   */
  function _setY(bytes32 gameName, bytes32 player, uint32[] memory y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((y)));
  }

  /**
   * @notice Set y (using the specified store).
   */
  function setY(IStore _store, bytes32 gameName, bytes32 player, uint32[] memory y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    _store.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((y)));
  }

  /**
   * @notice Get the length of y.
   */
  function lengthY(bytes32 gameName, bytes32 player) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of y.
   */
  function _lengthY(bytes32 gameName, bytes32 player) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of y (using the specified store).
   */
  function lengthY(IStore _store, bytes32 gameName, bytes32 player) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    uint256 _byteLength = _store.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get an item of y.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemY(bytes32 gameName, bytes32 player, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of y.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemY(bytes32 gameName, bytes32 player, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of y (using the specified store).
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemY(IStore _store, bytes32 gameName, bytes32 player, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _blob = _store.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Push an element to y.
   */
  function pushY(bytes32 gameName, bytes32 player, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to y.
   */
  function _pushY(bytes32 gameName, bytes32 player, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to y (using the specified store).
   */
  function pushY(IStore _store, bytes32 gameName, bytes32 player, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    _store.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from y.
   */
  function popY(bytes32 gameName, bytes32 player) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 4);
  }

  /**
   * @notice Pop an element from y.
   */
  function _popY(bytes32 gameName, bytes32 player) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 4);
  }

  /**
   * @notice Pop an element from y (using the specified store).
   */
  function popY(IStore _store, bytes32 gameName, bytes32 player) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    _store.popFromDynamicField(_tableId, _keyTuple, 1, 4);
  }

  /**
   * @notice Update an element of y at `_index`.
   */
  function updateY(bytes32 gameName, bytes32 player, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of y at `_index`.
   */
  function _updateY(bytes32 gameName, bytes32 player, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of y (using the specified store) at `_index`.
   */
  function updateY(IStore _store, bytes32 gameName, bytes32 player, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      _store.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 gameName, bytes32 player) internal view returns (ObjectDrawingData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 gameName, bytes32 player) internal view returns (ObjectDrawingData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data (using the specified store).
   */
  function get(
    IStore _store,
    bytes32 gameName,
    bytes32 player
  ) internal view returns (ObjectDrawingData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 gameName, bytes32 player, uint32[] memory x, uint32[] memory y) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(x, y);
    bytes memory _dynamicData = encodeDynamic(x, y);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 gameName, bytes32 player, uint32[] memory x, uint32[] memory y) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(x, y);
    bytes memory _dynamicData = encodeDynamic(x, y);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(IStore _store, bytes32 gameName, bytes32 player, uint32[] memory x, uint32[] memory y) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(x, y);
    bytes memory _dynamicData = encodeDynamic(x, y);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 gameName, bytes32 player, ObjectDrawingData memory _table) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(_table.x, _table.y);
    bytes memory _dynamicData = encodeDynamic(_table.x, _table.y);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 gameName, bytes32 player, ObjectDrawingData memory _table) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(_table.x, _table.y);
    bytes memory _dynamicData = encodeDynamic(_table.x, _table.y);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, bytes32 gameName, bytes32 player, ObjectDrawingData memory _table) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(_table.x, _table.y);
    bytes memory _dynamicData = encodeDynamic(_table.x, _table.y);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint32[] memory x, uint32[] memory y) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    x = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    y = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   *
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (ObjectDrawingData memory _table) {
    (_table.x, _table.y) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 gameName, bytes32 player) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 gameName, bytes32 player) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, bytes32 gameName, bytes32 player) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(uint32[] memory x, uint32[] memory y) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(x.length * 4, y.length * 4);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint32[] memory x, uint32[] memory y) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((x)), EncodeArray.encode((y)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32[] memory x,
    uint32[] memory y
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(x, y);
    bytes memory _dynamicData = encodeDynamic(x, y);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 gameName, bytes32 player) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = gameName;
    _keyTuple[1] = player;

    return _keyTuple;
  }
}
